// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PracticalTest.Transformations;

#nullable disable

namespace PracticalTest.Transformations.Migrations
{
    [DbContext(typeof(PracticalTestTransferDbContext))]
    [Migration("20221002130151_Comments")]
    partial class Comments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("read")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PracticalTest.Transformations.Destinations.BlogPosts.BlogPostReadModel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Desciption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("BlogPosts", "read");
                });

            modelBuilder.Entity("PracticalTest.Transformations.Destinations.BlogPosts.CommentReadModel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("BlogPostId")
                        .HasColumnType("bigint");

                    b.Property<string>("BlogPostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BlogPostReadModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("BlogPostReadModelId");

                    b.ToTable("Comments", "read");
                });

            modelBuilder.Entity("PracticalTest.Transformations.Destinations.BlogPosts.CommentReadModel", b =>
                {
                    b.HasOne("PracticalTest.Transformations.Destinations.BlogPosts.BlogPostReadModel", null)
                        .WithMany("CommentReadModels")
                        .HasForeignKey("BlogPostReadModelId");
                });

            modelBuilder.Entity("PracticalTest.Transformations.Destinations.BlogPosts.BlogPostReadModel", b =>
                {
                    b.Navigation("CommentReadModels");
                });
#pragma warning restore 612, 618
        }
    }
}
